name: Build and Release

on:
  push:
    branches:
      - release

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          architecture: "x64"
          cache: "pip"
          cache-dependency-path: |
            **/requirements*.txt

      - name: Extract version (Linux)
        id: get_version_linux
        if: runner.os == 'Linux'
        run: |
          version=$(grep 'version=' src/.conf | cut -d '=' -f 2)
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "VERSION=$version" >> $GITHUB_OUTPUT
        shell: bash

      - name: Extract version (Windows)
        id: get_version_windows
        if: runner.os == 'Windows'
        run: |
          $version = (Get-Content src/.conf | Select-String -Pattern 'version=').ToString().Split('=')[1].Trim()
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "VERSION=$version" >> $GITHUB_OUTPUT
        shell: powershell

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Build Executable
        uses: Nuitka/Nuitka-Action@main
        with:
          script-name: src/main.py
          nuitka-version: main
          standalone: true
          output-dir: build/
          output-file: passlock
          windows-icon-from-ico: img/Logo.ico
          include-data-files: src/.conf=./.conf
          product-name: PassLock
          product-version: ${{ env.VERSION }}
          onefile: false

      - name: Package Executable (Linux)
        if: runner.os == 'Linux'
        run: |
          tar -czvf passlock-${{ env.VERSION }}.tar.gz -C build/passlock.dist/ .
          tar -cJvf passlock-${{ env.VERSION }}.tar.xz -C build/passlock.dist/ .
        shell: bash

      - name: Package Executable (Windows)
        if: runner.os == 'Windows'
        run: |
          Compress-Archive -Path build/passlock.dist/* -DestinationPath passlock-${{ env.VERSION }}.zip
        shell: powershell

      - name: Upload Artifacts (Linux gzip)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: passlock-${{ env.VERSION }}.tar.gz
          path: |
            passlock-${{ env.VERSION }}.tar.gz

      - name: Upload Artifacts (Linux lzma)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: passlock-${{ env.VERSION }}.tar.xz
          path: |
            passlock-${{ env.VERSION }}.tar.xz
      
      - name: Upload Artifacts (Windows zip)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: passlock-${{ env.VERSION }}.zip
          path: |
            passlock-${{ env.VERSION }}.zip
      
      - name: Create Version Artifact
        run: echo ${{ env.VERSION }} > version

      - name: Upload Artifacts (version)
        uses: actions/upload-artifact@v4
        if: runner.os == 'Linux'
        with:
          name: version
          path: |
            version

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions: write-all

    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh
  
      - name: Extract Version
        run: |
          echo "VERSION=$(cat version/version)" >> $GITHUB_ENV
  
      - name: Prepare Files for Release
        run: |
          mkdir release_files
          find . -type f -name "passlock-${{ env.VERSION }}*.tar.gz" -exec cp {} release_files/ \;
          find . -type f -name "passlock-${{ env.VERSION }}*.tar.xz" -exec cp {} release_files/ \;
          find . -type f -name "passlock-${{ env.VERSION }}*.zip" -exec cp {} release_files/ \;

      - name: Create Release and Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ env.VERSION }} \
            release_files/* \
            --title "PassLock ${{ env.VERSION }}" \
            --notes "Release notes here"
