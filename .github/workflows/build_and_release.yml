name: Build and Release

on:
  push:
    branches:
      - release

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          architecture: 'x64'
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt

      - name: Extract version
        id: get_version
        run: |
          if [ $RUNNER_OS == "Windows" ]; then
            $version = Get-Content src/.conf | Select-String -Pattern 'version=' | ForEach-Object { $_ -replace '.*version=', '' }
            echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          else
            version=$(grep 'version=' src/.conf | cut -d '=' -f 2)
            echo "VERSION=$version" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Build Executable
        uses: Nuitka/Nuitka-Action@main
        with:
          script-name: src/main.py
          nuitka-version: stable
          standalone: true
          output-dir: build/
          windows-icon-from-ico: img/Logo.ico
          include-data-files: src/.conf=./.conf
          product-name: PassLock
          product-version: ${{ env.VERSION }}
          onefile: false  # Set this to true if you want single file executables, but this isn't used here

      - name: Package Executable
        run: |
          if [ $RUNNER_OS == "Linux" ]; then
            tar -czvf passlock-${{ env.VERSION }}.tar.gz -C build/ .
            tar -cJvf passlock-${{ env.VERSION }}.tar.xz -C build/ .
          elif [ $RUNNER_OS == "Windows" ]; then
            Compress-Archive -Path build/* -DestinationPath passlock-${{ env.VERSION }}.zip
          fi
        shell: bash

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }} Build
          path: |
            passlock-${{ env.VERSION }}*.tar.gz
            passlock-${{ env.VERSION }}*.tar.xz
            passlock-${{ env.VERSION }}*.zip

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ runner.os }} Build

      - name: Generate Release Notes
        id: generate_release_notes
        run: |
          echo "**What's changed in v${{ env.VERSION }}:**" > release_notes.md
          echo "" >> release_notes.md
          echo "- Summary of changes here..." >> release_notes.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          release_name: PassLock ${{ env.VERSION }}
          body_path: ./release_notes.md
          draft: false
          prerelease: false

      - name: Upload Assets to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: passlock-${{ env.VERSION }}*.*
          asset_name: passlock-${{ env.VERSION }}.*
          asset_content_type: application/octet-stream
